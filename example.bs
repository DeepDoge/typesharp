// my language

type None
type Error = {
    export type message = string
}

func foo(n: i64): i64 | None | Error => {
    if (n == 0) {
        return None
    }
    if (n < 0) {
        return Error { message: "n must be positive" }
    }
    return n * 2
}

type Foo = {
    export type foo = i64
}

type Bar = {
    export type bar = i64
}

type Baz = {
    export type baz = i64
}

type FooBar = Foo & Bar
type FooBarBaz = FooBar & Baz

Foo &= {
    export func createFoo(n: i64): Foo => {
        return Foo { foo: n }
    }
}

Bar &= {
    export func createBar(n: i64): Bar => {
        return Bar { bar: n }
    }
}

Baz &= {
    export func createBaz(n: i64): Baz => {
        return Baz { baz: n }
    }
}

FooBar &= {
    export func createFooBar(n: i64): FooBar => {
        return FooBar { foo: n, bar: n }
    }
}

FooBarBaz &= {
    export func createFooBarBaz(n: i64): FooBarBaz => {
        return FooBarBaz { foo: n, bar: n, baz: n }
    }
}

var foo = Foo.createFoo(1)
var bar = Bar.createBar(2)
var baz = Baz.createBaz(3)
var foobar = FooBar.createFooBar(4)
var foobarbaz = FooBarBaz.createFooBarBaz(5)

foobarbaz is Foo // true
foobarbaz is Bar // true
foobarbaz is Baz // true
foobarbaz is FooBar // true
foobarbaz is FooBarBaz // true

type Number = i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | f32 | f64
Number |= uBig | iBig

type Vector3(T: Number) => {
    export type x = T
    export type y = T
    export type z = T
}

abstract type Shape(T: Number) => {
    export func area(self: ref Self): T
}

type Circle(T: Number) => {
    export type radius = T
}

Circle(T) &= Shape(T) {
    export func area(self: ref Circle(T)): T => {
        return 3.14 * self.radius * self.radius
    }
}

type Rectangle(T: Number) => {
    export type width = T
    export type height = T
}

Rectangle(T) &= Shape(T) {
    export func area(self: ref Rectangle(T)): T => {
        return self.width * self.height
    }
}

func printArea(shape: ref Shape) => {
    print(shape.area())
}

var a = 1: i64 // has type 1: i64
a++
a // has type 2: i64

var b = 1: i64 // has type 1: i64

var c = a + b // has type 3: i64

a += userInputI64()
a // has type i64

func foo(a: i64 | i32) => {
    if (a is i64) return "a is i64"
    if (a is i32) return "a is i32"
    a // has type never
}

var a = foo(1: i64) // a has type "a is i64"
var b = foo(1: i32) // b has type "a is i32"

var c = foo(userInputI64OrI32()) // c has type "a is i64" | "a is i32"

if (c is "a is i64") {
    c // has type "a is i64"
} else if (c is "a is i32") {
    c // has type "a is i32"
}

func foo(a: unknown) => {
    if (a is i64) return "a is i64"
    if (a is i32) return "a is i32"
    a // has type unknown
    return "a is unknown"
}

var a = foo(1: i64) // a has type "a is i64"
var b = foo(1: i32) // b has type "a is i32"

abstract type Number = {
    export const ZERO: Self // Self type is only available in abstract types, for now, might change my mind
}

i64 &= Number {
    export const ZERO = 0
}

i32 &= Number {
    export const ZERO = 0
}

Number // has type i64 | i32
i64 // has type i64 & Number

func add(a: T: Number, b: T): T => {
    return a + b
}

as seen above, abstract types can be used as unions based on what they are implemented by

func mightError(): i64 | Error => {
    if (userInputI64() == 0) {
        return Error { message: "user input was 0" }
    }
    return userInputI64()
}

var a = mightError()
if (a is Error) return a
a += 69

var a = mightError()! // a has type i64, it returns the error if it is one
var a = mightError()!! // a has type i64, it panics if it is an error

var a = {
    export var x = 1
    export var y = 2
} // a has anonymous type { x: i64, y: i64 }

var a = {
    return 1: i64
} // a has type 1: i64

var a = {
    var x = userInputI64()
    export var xx = x * x
    if (x == 0) return -1 // if we return early, retuned value is returned
    export var y = x * 2 

    // if we reach to the end of the block, structure of exports is retuned
} // a has type { xx: i64, y: i64 } | -1: i64 // by default number literals are i64, float literals are f64



type Foo = {
    export type foo = i64
}

var fooish = {
    export var foo = 1
    export var bar = 2
}: Foo // equivalent of satisfying interface
// fooish has type Foo & { bar: i64 }

so we do
fooish is Foo // true
fooish is { bar: i64 } // syntax error because type check is not pattern matching, or signature matching,

but you can do
func foo(a: { export var bar = i64 }) => {
    return a.bar
}



let x: Foo | Bar | Baz = ...

var y = match (typeof x) {
    Foo => x.foo
    Bar => x.bar
    Baz => x.baz
}

// we have IntPtr, this is for pointer integer based on the system architecture (32 or 64 bit) etc. it starts from 0
// types are IntPtr


usage of unknown can change based on the context

func foo(a: unknown) => {
    if (a is i64) return "a is i64"
    if (a is i32) return "a is i32"
    a // has type unknown
    return "a is unknown"
}

// above we determine what unknown is based where we call it from. if we call it from a place where we know it is i64, then it is i64

var a = foo(1: i64) // a has type "a is i64" // and compile code doesnt even have the if statements

but if we call it from a place where we dont know what it is, then it is unknown

var a = foo(userInputI64OrI32()) // a has type "a is i64" | "a is i32"
unions share the same structure, so size of a union is the size of the biggest type in the union
also there is a 1 byte tag to determine which type it is on runtime

but if we truly get something unkonwn, such as raw bytes from a file, then it is really unknown
var a = foo(readFile("foo.txt")) // a has type "a is unknown" | "a is i64" | "a is i32"
if we truly dont know what it is like this, we do the type check based on the size of the value


but we can also use unknown for generics
func foo(a: T: unknown): T => {
    return a
}

btw you know we have these blocks 

var a = {
    var n = 1
    export var x = n * n
    export var y = n * 2
} // a has anonymous type { x: i64, y: i64 }

and same with types as well 

type Foo = {
    type n = 1
    export type x = n * n
    export type y = n * 2
}

so we can also do this

func foo(a: T, b: { 
    if (T is i64) {
        return type x = { export let i64 = T }
    } else if (T is i32) {
        return type x = { export let i32 = T }
    }
    return T
 }) => {
    return b
} // so based on the type of a, b changes, but its not like in ts, we really have a block here, and we can do anything we want in it

also there are shorthands

type Vector3(T: Number) => {
    export type x = T
    export type y = T
    export type z = T
}

would be the same as

type Vector3(T: Number) => {
    x = T
    y = T
    z = T
} // so if after the first word in the block, there is a =, then the whole block is a shorthand block

same for variables

var a = {
    var x = 1
    var y = 2
}

would be the same as

var a = {
    x = 1
    y = 2
}


let position: Vector3(i64) = {
    x = 1
    y = 2
    z = 3
}

type Foo = {
    a = 1 | 2 | 3
}

type Bar = {
    a = 4 | 5 | 6
}

let value: Foo | Bar = ...

if (value.a == 1) {
    value // has type Foo
} else if (value.a == 4) {
    value // has type Bar
}

when two types intersects then unlike unions new time is not any of the types that generated it

but abstract types keeps track of what impliments it
because in abstract types you can only use const and func.

or idk, i need something simpler

i mean i can just use operator function like in rust like Add Subtract traits. but it complicates things, 
ok i wannna have that with intersections but i also need a way to have an union that requires thing 
to implement something to be part of the union.

i mean in sense

type FooBar = Foo & Bar
var a: FooBar = ...
a is Foo // should be true, that makes sense

but

type Foo = { foo = i64 }
type Bar = { bar = i64 }

type FooBar = Foo & Bar
type NotFoo = { foo = i64 }

var a: FooBar = ...
a is NotFoo // should be false

but

type Foo = { foo = i64 }
type Bar = { bar = i64 }

type FooBar = Foo & Bar
type NotFoo = Foo

var a: FooBar = ...
a is NotFoo // should be true


// Ok after some fixes, and changes a todo example with current syntax would look like this:

type TodoItem = {
    export type task = string
    export type completed = bool
}

type TodoList = {
    export type items = TodoItem[]

    export func create(): Self => {
        return TodoList { items = [] }
    }
}

TodoList &= {
    export func addItem(list: ref Self, task: string) => {
        list.items += TodoItem { task = task, completed = false }
    }
    
    export func completeItem(list: ref Self, index: i64) => {
        list.items[index].completed = true
    }
}

var todoList = TodoList::create()

todoList.addItem("Buy groceries")
todoList.addItem { task = "Finish homework" }
todoList.addItem { export var task = "Do laundry" }
TodoList.addItem(ref todoList, "Clean room")
TodoList.addItem {
    export var list = ref todoList
    export var task = "Take out the trash"
}
TodoList.addItem {
    list = ref todoList
    task = "Do the dishes"
}

print("Todo List:")
for (item, i in todoList.items) {
    let status = item.completed ? "[x]" : "[ ]"
    print(i + 1, status, item.task)
}

todoList.completeItem(1)

print("\nUpdated Todo List:")
for (item, i in todoList.items) {
    let status = item.completed ? "[x]" : "[ ]"
    print(i + 1, status, item.task)
}



// For loop from 0 to 10
for (i from 0 to 10) {
    print(i)
}

type Dialog;
type AlertDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
    }
}
type ConfirmDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
        cancel = string
    }
}
type PromptDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
        cancel = string
    }
    input = string
}

func showDialog(dialog: T: ref Dialog) => {
    print(dialog.title) // error, title is not in Dialog
}

but if Dialog was an abstract type, then it would work
abstract type Dialog;
type AlertDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
    }
}
type ConfirmDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
        cancel = string
    }
}
type PromptDialog = Dialog & {
    title = string
    message = string
    buttons = {
        ok = string
        cancel = string
    }
    input = string
}

func showDialog(dialog: T: ref Dialog) => {
    print(dialog.title) // works
}

// i can make some fields required in abstract types

abstract type Dialog {
    export type title: string
    export type message: string

    export func showDialog(self: ref Self) => {
        print(self.title)
        print(self.message)
    }
}

// so what ever tries to be a Dialog must have title and message

type AlertDialog = Dialog & {
    buttons = {
        ok = string
    }
}

type OtherDialog = Dialog & {
    export type otherMessage = string
    export type buttons = {
        ok = string
    }
    export func showDialog(self: ref Self) => {
        Dialog::showDialog(self)
        print("other message")
    }
}


ok making a type "abtract" only lets you auto create a union of the types that impliments it
so
abstract type Number
i64 &= Number
i32 &= Number

we would know Number can only be i64 or i32, so we can do this

func add(a: T: Number, b: T): T => a + b
because we know that Number can only be implimented by other types, so, we keep track of what is implimenting it
so we know it can only be i64 or i32, so we can use + operator on it

so similar to this
type Number
Number |= i64
Number |= i32

but with abtract types we can also add common funcs and types to numbers, like this

abstract type Number = {
   export const ZERO: Self
}
i64 &= Number {
   ZERO = 0
}
i32 &= Number {
   ZERO = 0
}

so abstract types, allows you to act like intersection is also a union or something like that
right? so for example in the code we know only i32 and i64 impliments Number, 
so in that case when we expect a Number in some function for example, 
we know that it can only be a i32 or i64, because Number is an abstract, so it can only be intersected, so we can track every type that implments it, 
so it can auto create a union

abtract types enforce you to only be able to use it as an intersection, 
and it can have `const` and `funcs` not defined, not implimented, 
so in the example above we also have to provide ZERO to it before intersection



we dont need traits, we dont need enums, we dont need Result<>, we dont need Optional<>
all we need is types, unions, and intersections, stop inventing dumb things

type Number = {
   export const ZERO: Self
}
i64 &= Number {
   ZERO = 0
}
i32 &= Number {
   ZERO = 0
}

i64::ZERO // works

but

func add(a: T: Number, b: T): T => a + b // won't work, because we dont know what Number is, so we dont know if we can use + operator on it

but

if we use abstract type instead of type, then it works because we know what Number is, it can only be i64 or i32

ok so weird things we can do with this whole syntax to understand it better

type Foo = {
    const n = 1

    return typeof n
} // Foo has type i64

ok so typeof keyword, gives us the underlying type of the value without literals


ok example of compile time code, that will only run on compile time

const foo = {
    var n = 1
    export var x = n * n
} // foo has type { x: 2 } and it is a compile time value


ok so we can do this

var main = {
    print("hello world")
    return 0 
}

so main only runs once on runtime and has the value 0: i64

equivalent js code would be

var main;
{
    print("hello world")
    main = 0
}




ok some more syntax change

abstract type Shape {
    export func area(self: ref Self): f64
}

type Circle = Shape & {
    export type radius = f64
    export func area(self: ref Circle): f64 => 3.14 * self.radius * self.radius
}

var circle = Circle { radius = 2.0 }
print(circle.area())  // Output: Approximately 12.56

so abstract type requires to be intersected with another type, 
and it expects intersections to impliment the funcs and types it has if they have no defaults

so before it was like this

type Circle = Shape {
    export func area(self: ref Circle): f64 => 3.14 * self.radius * self.radius
} & {
    export type radius = f64
}

but this is more clean
type Circle = Shape & {
    export type radius = f64
    export func area(self: ref Circle): f64 => 3.14 * self.radius * self.radius
}

also makes more sense


so if i had this

type Number = Addable
i64 &= Number // would require to impliment Addable, but since with this syntax, it doesnt, because i64 already impliments it


tbh im also thinknig if i should change the keyword `abstract type` to `type trait` because it is more like a trait than a type
and this keyword starts with `type` its more clean in some way

so like this

type trait Number = {
    export const ZERO: Self
}

i64 &= Number & {
    export const ZERO = 0
}

tbh i should still allow this syntax too

i64 &= Number {
    export const ZERO = 0
}



ok plan lets first impliment types
then intersections and unions
then run time variables and scopes
then logic like if/else, no for loops for now
then then consts
then abstract types and rest
then everything else, loops and etc

first lets just parse code and show colors and info on hover in the ide with ide errors and etc, basically the lsp
then we can write compiling to c# 


type None

type Node(T) = {
    export type value = T
    export type next = ref Node(T) | None
}
type LinkedList(T) = {
    export type head = ref Node(T)
    export type tail = ref Node(T)
    export type length = i64
} | {
    export type head = None
    export type tail = None
    export type length = 0
}

LinkedList(T) &= {
    export func create(): Self => {
        return LinkedList { head = None, tail = None, length = 0 }
    }
    export func add(self: ref Self, value: T) => {
        if (self.head is None) {
            self.head = ref Node { value = value, next = None }
            self.tail = self.head
        } else {
            self.tail.next = ref Node { value = value, next = None }
            self.tail = self.tail.next
        }
        self.length++
    }
    export func remove(self: ref Self, index: i64) => {
        if (index == 0) {
            self.head = self.head.next
            self.length--
            return
        }
        var node = self.head
        for (i from 0 to index - 1) {
            node = node.next
        }
        node.next = node.next.next
        self.length--
    }
    export func get(self: ref Self, index: i64): T | None => {
        if (index < 0 || index >= self.length) {
            return None
        }
        var node = self.head
        for (i from 0 to index) {
            node = node.next
        }
        return node.value
    }
    export func set(self: ref Self, index: i64, value: T): void | Error => {
        if (index < 0 || index >= self.length) {
            return Error { message: "index out of range" }
        }
        var node = self.head
        for (i from 0 to index) {
            node = node.next
        }
        node.value = value
    }
}

var list = LinkedList::create()
list.add(1)
list.add(2)
list.add(3)
list.add(4)
list.add(5)

for (i from 0 to list.length - 1) {
    print(list.get(i))
}


this whole LinkedList example not really valid code because we dont have any idea on how lifetimes will work








tests on how would deallocation work, so by default we are stack first
we know when stacks deallocate, its end of the scope
so we are gonna make this behevior also default for heap so its consistent
ok so i think the main point here is, making deallocation a requirement, and maybe picking the scope it should deallocate is the best way to go
ok first think by default everything is on the stack, so how do we allocate on the heap, what is the syntax
i think it should be a part of the type system, so we know what is on the stack and what is on the heap

ok we already have `ref` keyword but this can means, reference to a value on the stack or heap, so we need to make this clear
btw i wanna change the keywords, `typeof` and `ref` like its on c# so its more apperant, ref of what and typeof what

var one: i64 = 1 // stack
var value: ref(i64) = ref(one) // stack reference
var value: typeof(i64) = typeof(1) // type

so in our language ref(i64) is equivalent of &i64 or i64* in rust, and typeof(i64) is equivalent of typeof(Int64) in c#
also ref(i64) is equivalent of ref Int64 in c#
we dont want reference counting because it might cause leaks, and we dont want any other complex things. we want a way to enfroce deallocation

there are two reasons why we use refs, one is referencing something, and the other one is, not copying big values
we have to cover for these two cases


var value: ref(i64) = ref(1) // stack reference
equivalent of 
var one = 1
var value = ref(one)
so ref(1) is a shorthand to both define a value anonymously and get a reference to it

ok you know i said we should have a type that is saying us that something is on heap

ok the problem with that is, lets say we have a function. saying this:
func foo(value: ref(i64)) => {
    // do something
}
we expect a ref, we dont care if its on the stack or heap, we just want a ref
so maybe, we can both have stack(i64) and heap(i64) and they are both ref(i64)


so like this

var value: ref(i64) = stack(1)
var value: ref(i64) = heap(1)
var valueL heap(i64) = heap(1)
var value: stack(i64) = stack(1)




var value: ref(i64) | None = None

func foo() => {
    var one = 1
    value = ref(one)
}

func bar() => {
    var two = 2
    value = ref(two) // this shouldnt work because and gets deallocated at the end of the scope
    // so how do we make this work?, well we can bind the lifetime of `two` to `value`
    two depends value // or some other syntax, but this is the idea
    // one thing is on runtime, what allocated where can change, so we can have some goto points to set while compiling the code.
    // so based on what runtime logic works, we can say jump here or there, so different deallocation strategies based on what runtime does 

    // another thing to note here is, what if value already has a ref? well we can know that, and deallocate it before we set the new one
    // tho idk
    // ok deallocation occurs at the end of the scope, but we can pick which scope it should deallocate on based on picking a value on that scope
    // that basic

    so maybe like this

    var two = 2 depends value
    value = ref(two)

    // so we can have a depends keyword, and we can say, this value depends on this other value, 
    so when this other value gets deallocated, this value gets deallocated too
    so everytime bar runs, every generated two gets deallocated, when value gets deallocated
    so since we are setting the value in the funciton, when ever value changes, old value gets deallocated right
    so when ever value changes, this will deallocate two, if also the scope of bar ends.
    tho this is wrong, only heap stuff can depend stuff

    var two = 2
    value = heap(two)

    ok new idea, when ever heap() runs, it return value should be set to something
    so here value copy of two, on the heap, also depends on value
    so now heap copy of two is connected to value, so when ever value gets deallocated, two gets deallocated too
}

foo()
bar()



ok f*ck it all new path


var value: ref i64 = heap 0 // allocates a space on heap with the size of i64

func foo() => {
    so when we do
    value = 2
    we just change the value on the memory that is already allocated
}

so

func bar(n: ref i64) => {
    print(n)
}

bar(ref value) // prints 0

foo()

bar(ref value) // prints 2

if we wanna change the ref itself, not write to where ref points to.

var other = 69
value = ref other // ok one thing here, deallocation doesnt make sense with current syntax, 
                        but if value has a heap ref, changing where value points to, should deallocate the old value

also this isnt allowed

{
    var other = 69
    value = ref other // this is not allowed, because other will be deallocated at the end of the scope and value is out of scope

    value = heap other // this is allowed, because now other is copied on the heap
        heap keyword returns a ref, ref keyword gets a ref of a value
        if ref typed value is being set by another value of same type, it changes the value on the memory
        but if a ref typed value is being set by a ref of the same type, it changes where the ref points to
        so when a value is a ref type, it acts as normal if its not a ref, only thing different is you can set a ref to it.
        refs can have a flag that says if it is on the stack or heap, so we can know if we should deallocate it or not
        ok we should make ref, a union, in the type system, its eaither a heap ref or stack ref.
}

another thing

if a value is like this:
var value: ref i64 | None = None // so its either a None, or a ref to a i64
so if i set value to None, it should deallocate the ref if it has a `heap ref`
so if value is changes, not where it points to, we deallocate the older `heap ref` always

but this can be problamatic, example:

var value: ref i64 = heap 0
var foo: ref i64 | None = None

{
    var other: ref i64 = ref value
    other = heap 1 // this in theory will also deallocate value, which is not good. because other had the type `heap ref`
        so instead of `heap ref` and `stack ref` types, we should have two other types, and says, deallocate me on change or scope end
        other says not do anything about me

        also without doing this at the end of the scope, this will try to deallocate other, because it is a `heap ref`
        we need a different type of ref that says "i dont deallocate automatically, so compile knows that it can bind allocations to it, so doesnt allow"
        it can just purely be used to store refs, and `heap ref` only why? because if it can be a stack ref, we dont know its life time.
        so it should say "i only store refs to heap, and i dont deallocate them, so dont set stuff to me that will deallocate at the end of this stack."

        ok new definition "i only accepts refs that will not get deallocated at the end of this scope"

    foo = ref other // also this should be allowed, and it will be decided on compile time
}


so based on above, this is what we need:


var outer: ref i64 | None = None
{
    var value: ref i64 = heap 0
    var foo: ref i64 | None = None

    foo = ref value // they are in the same scope so allowed

    outer = ref value // this is not allowed, because outer is out of scope of value and value will be deallocated at the end of the scope
    outer = heap value // this is allowed, because its completely a new allocation, a copy

    var baz = ref outer // this is not allowed because baz would deallocate outer at the end of the scope and outer is not in this scope

    {
        var other: special ref i64 = ref value // this is allowed because other is a `special ref` and it will not get deallocated at the end of this scope
        other = heap 1 // this is not allowed, because other only allows refs that will not get deallocated at the end of this scope

        var bar = heap 2
        other = ref bar // also not allowed because bar will get deallocated at the end of this scope

        foo = ref other // this is allowed, because other is a `special ref` and it will not get deallocated at the end of this scope

        // we dont do anything about other because its a `special ref`
    }

    // deallocates value, and foo if they are `heap ref`
}
// deallocates outer if it is `heap ref`

ok so i found the name for `special ref`, its, calm ref, because it doesnt get deallocated at the end of the scope, it stays calm
since its calm we dont trust it with deallocation, so we dont allow it to be set by a ref that will get deallocated at the end of the scope

unlike `heap ref` or `stack ref`, `calm ref` doesnt have to be on runtime, its only needed on compile time, so we can know if we can set it or not

also if we specificly say that a ref is `heap ref` or `stack ref` we know what its 
so we dont need to check, what its before setting it or at the end of the scope

so we can have this

var value: heap ref i64 = heap 0

or

var value: stack ref i64 = stack 0

or 

var other = 1
var value: stack ref i64 = ref other

if we do this we wont need runtime check.

tho also if compiler itself can say that its always a stack ref and never a heap ref, then compiler can do the same optimization itself.
because of how our typing system works